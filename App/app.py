import json
import streamlit as st
import joblib
from pygwalker.api.streamlit import StreamlitRenderer
import pandas as pd

st.set_page_config(
    page_title="Model Logistic_Regression_Covid 19",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded"
)
  
tab1, tab2, tab3, tab4 = st.tabs(['Home', 'Visualization', 'Download', 'About us'])

with tab1:
    
    st.write('''
    # Form prediction patient
    ''')

    col1, col2 = st.columns(2)

    with col1:
        USMER = st.number_input('USMER:', value=2, max_value=2)

        MEDICAL_UNIT = st.number_input('MEDICAL_UNIT:', value=1, max_value=13)

        PATIENT_TYPE = st.number_input('PATIENT_TYPE:', value=1,  max_value=2)

        PNEUMONIA = st.number_input('PNEUMONIA:', value=1,  max_value=2)


    with  col2:
        AGE = st.slider('AGE:', value=65, max_value=120)

        DIABETES = st.number_input('DIABETES', value=2, max_value=2)

        HIPERTENSION = st.number_input('HIPERTENSION', value=1, max_value=2)

        RENAL_CHRONIC = st.number_input('RENAL_CHRONIC', value=2, max_value=2)

        CLASIFFICATION_FINAL = st.number_input('CLASIFFICATION_FINAL', value=1, max_value=2)


    def predict_covid(
            USMER,
            MEDICAL_UNIT,
            PATIENT_TYPE,
            PNEUMONIA,
            AGE,
            DIABETES,
            HIPERTENSION,
            RENAL_CHRONIC,
            CLASIFFICATION_FINAL):

        new_sample = pd.DataFrame({
            "USMER": [USMER],
            "MEDICAL_UNIT": [MEDICAL_UNIT],
            "PATIENT_TYPE": [PATIENT_TYPE],
            "PNEUMONIA": [PNEUMONIA],
            "AGE": [AGE],
            "DIABETES": [DIABETES],
            "HIPERTENSION": [HIPERTENSION],
            "RENAL_CHRONIC": [RENAL_CHRONIC],
            "CLASIFFICATION_FINAL": [CLASIFFICATION_FINAL],
        })

        x = pd.DataFrame(new_sample)
        with open("../Artifacts/log_reg_covid1.sav", 'rb') as f:
            __log_reg_covid1 = joblib.load(f)
        predict = str(__log_reg_covid1.predict(x)[0])
        return predict

    if st.button('Compute a prediction'):
        predict = predict_covid(
            USMER,
            MEDICAL_UNIT,
            PATIENT_TYPE,
            PNEUMONIA,
            AGE,
            DIABETES,
            HIPERTENSION,
            RENAL_CHRONIC,
            CLASIFFICATION_FINAL)

        st.success('Done')

        if predict == 1:
            st.write('T·ª∑ l·ªá t·ª≠ vong cao')
        else:
            st.write('T·ª∑ l·ªá t·ª≠ vong th·∫•p')


with tab2: 
    
    df = pd.read_csv("Covid Data.csv")

    # Getting rid of the missing values of features except "INTUBED", "PREGNANT", "ICU"
    cols = ['PNEUMONIA', 'DIABETES', 'COPD', 'ASTHMA', 'INMSUPR', 'HIPERTENSION',
            'OTHER_DISEASE', 'CARDIOVASCULAR', 'OBESITY', 'RENAL_CHRONIC', 'TOBACCO']
    for i in cols:
        df = df[(df[i] == 1) | (df[i] == 2)]

    # Preaparing "DATE_DIED" column
    df['DEATH'] = [2 if row == "9999-99-99" else 1 for row in df.DATE_DIED]

    # Droping the columns
    df.drop(columns=["DATE_DIED"], inplace=True)

    # Converting process according to inference above
    df.PREGNANT = df.PREGNANT.replace(97, 2)
    # Getting rid of the missing values
    df = df[(df.PREGNANT == 1) | (df.PREGNANT == 2)]

    df.CLASIFFICATION_FINAL = df.CLASIFFICATION_FINAL.replace([1, 2, 3], 1)
    df.CLASIFFICATION_FINAL = df.CLASIFFICATION_FINAL.replace([4, 5, 6, 7], 2)

    pyg_app = StreamlitRenderer(df, spec='../Artifacts/streamlit.json')
    pyg_app.explorer()
    

with tab3:

    with open('Covid Data.csv') as f:
        st.download_button('Download CSV', f)  

    st.link_button("Download PDF", "https://drive.google.com/file/d/1SztGQBgiJlBq6EM1J6UErkdBkOLsM5_H/view?usp=drive_link")

    st.link_button("Download Project", "https://drive.google.com/file/d/1SztGQBgiJlBq6EM1J6UErkdBkOLsM5_H/view?usp=drive_link")

    st.write('Thanks for downloading!')

with tab4:
    st.write('''
             
- Tr∆∞·ªùng ƒê·∫°i h·ªçc S√†i G√≤n (SGU)      
- H·ªç t√™n sinh vi√™n: Nguy·ªÖn Ho√†ng Tu·∫•n          
- M√£ s·ªë sinh vi√™n: 3121410556                             
- Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: ThS. Nguy·ªÖn Thanh Ph∆∞·ªõc

*******************************************************************************************************
- M√¥n h·ªçc: Khai ph√° d·ªØ li·ªáu v√† ·ª©ng d·ª•ng (Data Mining)
- ƒê·ªÅ t√†i: S·ª≠ d·ª•ng thu·∫≠t to√°n Logistic Regression d·ª± ƒëo√°n t·ªâ l·ªá t·ª≠ vong c·ªßa b·ªánh nh√¢n covid 19 ·ªü Mexico
- NƒÉm h·ªçc: 2023-2024

******************************************************************************************************
1. C√°c t·∫≠p tin bao g·ªìm:
	- Folder "Data": ch·ª©a dataset file csv 'Covid Data' ƒë·ªÉ training model.

	- Folder "Document":
	    + File "Logistic_Regression_Covid.docx": l√† t·∫≠p tin 'word' b·∫£n t√†i li·ªáu b√°o c√°o ƒë·ªÅ t√†i g·ªëc.
	    + File "Logistic_Regression_Covid.pdf": l√† t·∫≠p tin 'PDF' c·ªßa b√°o c√°o (L·ª° b·∫£n g·ªëc c√≥ b·ªã v·∫•n ƒë·ªÅ).

	- Folder "Model": ch·ª©a Notebook ch∆∞∆°ng tr√¨nh python 'Logistic_Regression_Covid.ipynb'.

	- Folder "Artifacts": g·ªìm nh·ªØng file 'json' v√† 'sav' ƒë·ªÉ l∆∞u nh·ªØng gi√° tr·ªã c·∫ßn thi·∫øt
	    + File "columns.json": ch·ª©a c√°c c√°c t√™n c√°c ƒë·∫∑c tr∆∞ng (c·ªôt) c·ªßa m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán.
	    + File "artifact.json": ch·ª©a c√°c ch√∫ th√≠ch c·ªßa c√°c ƒë·∫∑c tr∆∞ng.
	    + File "log_reg_covid.sav": d√πng th∆∞ vi·ªán joblib ƒë·ªÉ lu∆∞ model ƒë√£ hu·∫•n luy·ªán.

	- Folder "API": G·ªìm 2 file ch∆∞∆°ng tr√¨nh .py
	    + File "server": l√† ch∆∞∆°ng tr√¨nh ch·∫°y 'API' (test tr√™n Postman)
	    + File "util": l√† ch∆∞∆°ng tr√¨nh ch·ª©a c√°c h√†m ƒë·ªÉ ch·∫°y API trong 'server'.

	- Folder "App": l√† ch∆∞∆°ng tr√¨nh ch·∫°y 'web_app' local
	    + File "app.py": l√† ch∆∞∆°ng tr√¨nh ch√≠nh c·ªßa web_app s·ª≠ d·ª•ng framework 'Streamlit' v√† nh√∫ng
	                     th∆∞ vi·ªán 'PyWalker' ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu.
	    + File "requirements.txt": ch·ª©a c√°c version th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë·ªÉ c√†i ƒë·∫∑t deploy tr√™n 'Streamlit Cloud'

2. Link dataset:
    - Mexican government: https://datos.gob.mx/busca/dataset/informacion-referente-a-casos-covid-19-en-mexico

    - Kaggle: https://www.kaggle.com/datasets/meirnizri/covid19-dataset

3. Link deploy web_app: https://predict-covid.streamlit.app

4. Link Souce code Moddel (ipynb)
    - Github: https://github.com/NguyenHoangTuanDev/ML_Logistic-Regression_Covid19.git

    - Kaggle: https://www.kaggle.com/code/nguyenhoangtuan6103/model-machine-leaning-covid-19-logistic-regression

    - Google Colab: https://colab.research.google.com/drive/1lGwDOiCiIcwmIejJIV03qHhLeoOhi8X6?usp=sharing

5. C√°c framework ƒë√£ s·ª≠ d·ª•ng:
    - Streamlit: https://streamlit.io

    - Kanaries: https://kanaries.net/pygwalker

***************************************************************************************************************                          
- Email: hoangtuan6103@gmail.com
- Facebook: https://www.facebook.com/nguyenhoangtuan6103                                                                                          
- Youtube: https://www.youtube.com/@nguyenhoangtuan6103                                                                                          

***************************************************************************************************************                                                                                        
M·ªçi √Ω ki·∫øn ƒë√≥ng g√≥p c·ªßa c√°c b·∫°n m√¨nh ƒë·ªÅu ghi nh·∫≠n.           
Xin ch√¢n th√†nh c·∫£m ∆°n.                                                                             
'''
)